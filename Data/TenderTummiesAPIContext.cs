using Microsoft.EntityFrameworkCore;
using TenderTummiesAPI.Models;


//Written By: Pair Programmed as a team. 
namespace TenderTummiesAPI.Data
{
    //APIContext class that inherits from the DbContext class that is a part of the Entity Framework
    public class TenderTummiesAPIContext : DbContext
    {
        public TenderTummiesAPIContext(DbContextOptions<TenderTummiesAPIContext> options)
            : base(options)
        { }

        // Creates tables in the database; takes our models and turns them into tables in the database. Any models without a DbSet do not turn into tables in the database.
        public DbSet<Child> Child { get; set; }
        public DbSet<Symptom> Symptom { get; set; }
        public DbSet<Trigger> Trigger { get; set; }
        public DbSet<Safe> Safe { get; set; }
        public DbSet<TriggerSymptom> TriggerSymptom { get; set; }
        public DbSet<Ingestion> Ingestion { get; set; }
        public DbSet<Reaction> Reaction { get; set; }
        public DbSet<ReactionTrigger> ReactionTrigger { get; set; }
        public DbSet<Trial> Trial { get; set; }
        public DbSet<ReactionEvent> ReactionEvent { get; set; }
        public DbSet<ReactionEventSymptom> ReactionEventSymptom { get; set; }
        public DbSet<TrialEvent> TrialEvent { get; set; }


        //Sets the DateCreated on the <Customer> to todays date every time a new instance of Customer is added to the Context. 
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // If a model has a date field that should be generated by the database
            modelBuilder.Entity<Reaction>()
                .Property(b => b.StartDate)
                .HasDefaultValueSql("strftime('%Y-%m-%d')");
            modelBuilder.Entity<Reaction>()
                .Property(p => p.EndDate)
                .HasDefaultValueSql("strftime('%Y-%m-%d')");
            modelBuilder.Entity<ReactionEvent>()
                .Property(c => c.DateTime)
                .HasDefaultValueSql("strftime('%Y-%m-%d %H:%M:%S')");
            modelBuilder.Entity<Trial>()
                .Property(b => b.StartDate)
                .HasDefaultValueSql("strftime('%Y-%m-%d')");
            modelBuilder.Entity<Trial>()
                .Property(p => p.EndDate)
                .HasDefaultValueSql("strftime('%Y-%m-%d')");
            modelBuilder.Entity<TrialEvent>()
                .Property(c => c.DateTime)
                .HasDefaultValueSql("strftime('%Y-%m-%d %H:%M:%S')");
        }

    }
}